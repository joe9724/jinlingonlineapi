// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// NrActivityListSponsorURL generates an URL for the activity list sponsor operation
type NrActivityListSponsorURL struct {
	ActivityID  *int64
	CategoryID  *int64
	IsClassic   *int64
	Key         *string
	MemberID    *int64
	PageIndex   *int64
	PageSize    *int64
	ServiceType *int64
	Status      *int64
	Title       *string
	Type        *int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *NrActivityListSponsorURL) WithBasePath(bp string) *NrActivityListSponsorURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *NrActivityListSponsorURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *NrActivityListSponsorURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/activity/list/sponsor"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/joe9724/jinlinonline/1.0.0"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var activityID string
	if o.ActivityID != nil {
		activityID = swag.FormatInt64(*o.ActivityID)
	}
	if activityID != "" {
		qs.Set("activityId", activityID)
	}

	var categoryID string
	if o.CategoryID != nil {
		categoryID = swag.FormatInt64(*o.CategoryID)
	}
	if categoryID != "" {
		qs.Set("categoryId", categoryID)
	}

	var isClassic string
	if o.IsClassic != nil {
		isClassic = swag.FormatInt64(*o.IsClassic)
	}
	if isClassic != "" {
		qs.Set("isClassic", isClassic)
	}

	var key string
	if o.Key != nil {
		key = *o.Key
	}
	if key != "" {
		qs.Set("key", key)
	}

	var memberID string
	if o.MemberID != nil {
		memberID = swag.FormatInt64(*o.MemberID)
	}
	if memberID != "" {
		qs.Set("memberId", memberID)
	}

	var pageIndex string
	if o.PageIndex != nil {
		pageIndex = swag.FormatInt64(*o.PageIndex)
	}
	if pageIndex != "" {
		qs.Set("pageIndex", pageIndex)
	}

	var pageSize string
	if o.PageSize != nil {
		pageSize = swag.FormatInt64(*o.PageSize)
	}
	if pageSize != "" {
		qs.Set("pageSize", pageSize)
	}

	var serviceType string
	if o.ServiceType != nil {
		serviceType = swag.FormatInt64(*o.ServiceType)
	}
	if serviceType != "" {
		qs.Set("serviceType", serviceType)
	}

	var status string
	if o.Status != nil {
		status = swag.FormatInt64(*o.Status)
	}
	if status != "" {
		qs.Set("status", status)
	}

	var title string
	if o.Title != nil {
		title = *o.Title
	}
	if title != "" {
		qs.Set("title", title)
	}

	var typeVar string
	if o.Type != nil {
		typeVar = swag.FormatInt64(*o.Type)
	}
	if typeVar != "" {
		qs.Set("type", typeVar)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *NrActivityListSponsorURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *NrActivityListSponsorURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *NrActivityListSponsorURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on NrActivityListSponsorURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on NrActivityListSponsorURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *NrActivityListSponsorURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
