// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// NrActivityFieldListURL generates an URL for the activity field list operation
type NrActivityFieldListURL struct {
	Title     *string
	Capacity  *int64
	CostType  *int64
	Icon      *string
	OrderBy   *int32
	PageIndex *int64
	PageSize  *int64
	SiteArea  *int64
	Status    *int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *NrActivityFieldListURL) WithBasePath(bp string) *NrActivityFieldListURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *NrActivityFieldListURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *NrActivityFieldListURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/activity/field/list"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/joe9724/jinlinonline/1.0.0"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var title string
	if o.Title != nil {
		title = *o.Title
	}
	if title != "" {
		qs.Set("Title", title)
	}

	var capacity string
	if o.Capacity != nil {
		capacity = swag.FormatInt64(*o.Capacity)
	}
	if capacity != "" {
		qs.Set("capacity", capacity)
	}

	var costType string
	if o.CostType != nil {
		costType = swag.FormatInt64(*o.CostType)
	}
	if costType != "" {
		qs.Set("costType", costType)
	}

	var icon string
	if o.Icon != nil {
		icon = *o.Icon
	}
	if icon != "" {
		qs.Set("icon", icon)
	}

	var orderBy string
	if o.OrderBy != nil {
		orderBy = swag.FormatInt32(*o.OrderBy)
	}
	if orderBy != "" {
		qs.Set("orderBy", orderBy)
	}

	var pageIndex string
	if o.PageIndex != nil {
		pageIndex = swag.FormatInt64(*o.PageIndex)
	}
	if pageIndex != "" {
		qs.Set("pageIndex", pageIndex)
	}

	var pageSize string
	if o.PageSize != nil {
		pageSize = swag.FormatInt64(*o.PageSize)
	}
	if pageSize != "" {
		qs.Set("pageSize", pageSize)
	}

	var siteArea string
	if o.SiteArea != nil {
		siteArea = swag.FormatInt64(*o.SiteArea)
	}
	if siteArea != "" {
		qs.Set("siteArea", siteArea)
	}

	var status string
	if o.Status != nil {
		status = swag.FormatInt64(*o.Status)
	}
	if status != "" {
		qs.Set("status", status)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *NrActivityFieldListURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *NrActivityFieldListURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *NrActivityFieldListURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on NrActivityFieldListURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on NrActivityFieldListURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *NrActivityFieldListURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
