// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNrActivityFieldListParams creates a new NrActivityFieldListParams object
// with the default values initialized.
func NewNrActivityFieldListParams() NrActivityFieldListParams {
	var ()
	return NrActivityFieldListParams{}
}

// NrActivityFieldListParams contains all the bound params for the activity field list operation
// typically these are obtained from a http.Request
//
// swagger:parameters /activity/field/list
type NrActivityFieldListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*场地名
	  In: query
	*/
	Title *string
	/*容纳人数
	  Minimum: 0
	  In: query
	*/
	Capacity *int64
	/*费用类型
	  In: query
	*/
	CostType *int64
	/*icon
	  In: query
	*/
	Icon *string
	/*排序字段 0=热门推荐 1=最多查看 2=最多发起
	  In: query
	*/
	OrderBy *int32
	/*分页索引
	  In: query
	*/
	PageIndex *int64
	/*分页尺寸
	  In: query
	*/
	PageSize *int64
	/*场地面积
	  In: query
	*/
	SiteArea *int64
	/*状态 0=正常 1锁定
	  In: query
	*/
	Status *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *NrActivityFieldListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qTitle, qhkTitle, _ := qs.GetOK("Title")
	if err := o.bindTitle(qTitle, qhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	qCapacity, qhkCapacity, _ := qs.GetOK("capacity")
	if err := o.bindCapacity(qCapacity, qhkCapacity, route.Formats); err != nil {
		res = append(res, err)
	}

	qCostType, qhkCostType, _ := qs.GetOK("costType")
	if err := o.bindCostType(qCostType, qhkCostType, route.Formats); err != nil {
		res = append(res, err)
	}

	qIcon, qhkIcon, _ := qs.GetOK("icon")
	if err := o.bindIcon(qIcon, qhkIcon, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderBy, qhkOrderBy, _ := qs.GetOK("orderBy")
	if err := o.bindOrderBy(qOrderBy, qhkOrderBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageIndex, qhkPageIndex, _ := qs.GetOK("pageIndex")
	if err := o.bindPageIndex(qPageIndex, qhkPageIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteArea, qhkSiteArea, _ := qs.GetOK("siteArea")
	if err := o.bindSiteArea(qSiteArea, qhkSiteArea, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NrActivityFieldListParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Title = &raw

	return nil
}

func (o *NrActivityFieldListParams) bindCapacity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("capacity", "query", "int64", raw)
	}
	o.Capacity = &value

	if err := o.validateCapacity(formats); err != nil {
		return err
	}

	return nil
}

func (o *NrActivityFieldListParams) validateCapacity(formats strfmt.Registry) error {

	if err := validate.MinimumInt("capacity", "query", int64(*o.Capacity), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *NrActivityFieldListParams) bindCostType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("costType", "query", "int64", raw)
	}
	o.CostType = &value

	return nil
}

func (o *NrActivityFieldListParams) bindIcon(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Icon = &raw

	return nil
}

func (o *NrActivityFieldListParams) bindOrderBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("orderBy", "query", "int32", raw)
	}
	o.OrderBy = &value

	return nil
}

func (o *NrActivityFieldListParams) bindPageIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageIndex", "query", "int64", raw)
	}
	o.PageIndex = &value

	return nil
}

func (o *NrActivityFieldListParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	return nil
}

func (o *NrActivityFieldListParams) bindSiteArea(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("siteArea", "query", "int64", raw)
	}
	o.SiteArea = &value

	return nil
}

func (o *NrActivityFieldListParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("status", "query", "int64", raw)
	}
	o.Status = &value

	return nil
}
